<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/security
	   http://www.springframework.org/schema/security/spring-security.xsd
	   http://www.springframework.org/schema/cache 
	   http://www.springframework.org/schema/cache/spring-cache.xsd"	   
       >
    
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.yixun.ccmz.dao,com.yixun.ccmz.service"/>
    
    <!-- 启用缓存注解 -->
    <cache:annotation-driven />
    
	<!-- 基于@AspectJ切面的驱动器 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <!-- 指定配置文件的位置，貌似不指定也好使 -->
    <context:property-placeholder location="classpath:jdbc.properties"/> 
    
    
    <!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" 
		p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}"
		p:username="${jdbc.username}"
		p:password="${jdbc.password}" />
		
<!-- 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="${jdbc.driverClassName}"
		p:jdbcUrl="${jdbc.url}"
		p:user="${jdbc.username}"
		p:password="${jdbc.password}"
		p:maxPoolSize="40"
		p:minPoolSize="1"
		p:initialPoolSize="1"
		p:maxIdleTime="20"/>		 -->

	<!-- 配置Jdbc模板  -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" />
		
    <!-- myBatis相关配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自動掃描entity目錄, 省掉Configuration.xml裡的手工配置 -->
        <property name="mapperLocations" value="classpath:com/yixun/ccmz/dao/mybatis/*.xml"/>
        <property name="configLocation" value="classpath:myBatisConfig.xml"></property>
    </bean>
    	<!-- 将mybatis的mapper接口类,动态生成Spring Bean。否则需要按以下方式手工逐条注册
			<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
			  <property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" />
			  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
			</bean>    	
    	-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yixun.ccmz.dao.mybatis" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    	<!-- 配置myBatis模板  -->
    <bean class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg ref="sqlSessionFactory"></constructor-arg>
    </bean>
        
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		   
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches"> 
			<set> 
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default" /> 
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="accountCache" /> 
			</set> 
		</property> 
	</bean>     
		
    <!-- 对标识@Transactional注解的Bean进行加工处理，以织入事务管理切面 proxy-target-class="true" 使用CGLib动态代理  false是接口代理-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
					
	<!-- 通过XML AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 （基于schema的AOP配置方式 如果声明了tx:annotation-driven,则这段应该也可以省略了
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression="(execution(* com.yixun.ccmz.service..*(..))) and (@annotation(org.springframework.transaction.annotation.Transactional))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*"/>			
		</tx:attributes>
	</tx:advice>
	-->
		<!-- 开始Method级支持@Secured注解 方法级注解使用的AOP的方式（而不是像url使用的是filter），默认spring使用的是接口代理，所以默认情况下应该将
		Service层分成接口与实现，然后将@Secured标识在Service接口的方法上。或者将Controller分成接口与实现类，然后将@Secured放到Controller的接口上。
		显示在Service上更合理。配置proxy-target-class="true" 让Spring用CGLib的类代理实现AOP，这样就可以直接在Controller的方法上进行注解了。
		注：这个配置只对在这个文件配置的（即Service层、Dao层有效），对于Controller需要在Servlet的配置文件中（即ccmz-servlet.xml）配置。所以，就是看要将方法级授权限制在Controller层还是Service层。
		如果按照.net的习惯，是配置在Controller层。但是如何将Service作为API使用的话，那么也可以放在Service层。
	-->
	<security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled" proxy-target-class="true"></security:global-method-security>
	
	
	<bean id="springContextHolder" class="com.yixun.infrastructure.SpringContextHolder"></bean>
	<bean id="myAuthenticationProvider" class="com.yixun.ccmz.service.fba.MyAuthenticationProvider" p:userDetailsService-ref="myUserDetailsService"></bean>
	<bean id="myUserDetailsService" class="com.yixun.ccmz.service.fba.MyUserDetailsService" p:rolePrefix=""></bean>
	<!-- 自定义AuthenticationSuccessHandler，可以覆盖默认的SavedRequestAwareAuthenticationSuccessHandler，并开启Referer使其支持从Referer获取跳转前的页面，登录后直接跳转到访问前的页面 -->
	<bean id="myAuthenticationSuccessHandler" class="com.yixun.ccmz.service.fba.MyAuthenticationSuccessHandler" p:useReferer="false"></bean>	
	<bean id="myAuthenticationFailureHandler" class="com.yixun.ccmz.service.fba.MyAuthenticationFailureHandler"></bean>
	
	<bean id="savedRequestAwareAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
	     <property name="targetUrlParameter" value="redirect"/>
	     <property name="useReferer" value="true"/>
	</bean>	
	
	<security:http pattern="/bower_components/**" security="none"/>
	<security:http pattern="/403.html" security="none"/>
	<!-- access:使用access指定访问的角色，但有3个特殊值： 
		IS_AUTHENTICATED_ANONYMOUSLY表示用户不需要登录就可以访问
		IS_AUTHENTICATED_REMEMBERED表示用户需要是通过Remember-Me功能进行自动登录的才能访问；
		IS_AUTHENTICATED_FULLY表示用户的认证类型应该是除前两者以外的，也就是用户需要是通过登录入口进行登录认证的才能访问
		 
		 扩展表达式
		 26.2.1 Referring to Beans in Web Security Expressions
		 
		-->
	<security:http use-expressions="true" access-decision-manager-ref="">		
		<!-- 
		<security:intercept-url pattern="/account/login*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/YLJZ/**" access="ROLE_医院结算员" />
		<security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY,IS_AUTHENTICATED_REMEMBERED" />  -->
		
		<security:intercept-url pattern="/account/login*" access="isAnonymous()" />		
		<!-- 完成去掉ROLE_前缀需要配置accessDecisionManager，具体有些复杂，参考 http://www.baeldung.com/spring-security-custom-voter -->
		<!-- 不过Spring 4 可以使用hasAuthority来代替hasRole，hasAuthority不检查ROLE_前缀 https://stackoverflow.com/questions/33205236/spring-security-added-prefix-role-to-all-roles-name-->
		<security:intercept-url pattern="/YLJZ/**" access="hasAuthority('医院结算员')" />
		<security:intercept-url pattern="/**" access="isAuthenticated()" />
		
		<!--  可能会com.yixun.ccmz.web.ResourcePathExposer有问题，会跳转到引用了{rpe.resourceRoot}的文件,原因是onAuthenticationSuccess中取出来的request.getRequestURI是js文件。
			可以使用配置 authentication-success-handler-ref myAuthenticationSuccessHandler进行跳转
			默认使用的是SavedRequestAwareAuthenticationSuccessHandler这个类，配合default-target-url="/index" always-use-default-target="true"实现的跳转
			另外SavedRequestAwareAuthenticationSuccessHandler还支持从Refered还有url中配置的targetUrlParameter来确定跳转的地址，但不知道为什么自己测试时refered总是login页面，导致登录后又跳到login页
			另外，也不确定上面配置的SavedRequestAwareAuthenticationSuccessHandler的bean是否生效
		 -->
		<security:form-login 
			login-page="/account/login" username-parameter="userName" password-parameter="password" 
			login-processing-url="/logincheck" 
			authentication-failure-url="/account/login?error"
			default-target-url="/index" always-use-default-target="true"/>
		<!-- 默认的session过期就会跳到login页。但是如何这里手工配置了，那么session的filter就会忽略之前的redirect，造成logout传递的参数就没有了
		<security:session-management invalid-session-url="/account/login"></security:session-management> -->
		
		<!-- 不配置logout，自己在代码里进行处理，为了能够在登录页显示成功登出的消息
		<security:logout delete-cookies="JSESSIONID" logout-url="/account/logout"/> --> 	
		<security:csrf disabled="true"/>	
		<!-- 基本验证就是使用浏览器的模态登录界面
		<security:http-basic /> -->
		
		<!-- 配置拒绝授权后的403页 -->
		<security:access-denied-handler error-page="/403.html"/>
	</security:http>
	
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="myAuthenticationProvider">
		</security:authentication-provider>
	</security:authentication-manager>	
	
	 <!-- 
	<security:authentication-manager  alias="authenticationManager">
		<security:authentication-provider>
			<security:user-service id="userDetailsService">
				<security:user name="绿园区" password="1234567" authorities="ROLE_医院结算员" />
				<security:user name="SystemUser" password="1" authorities="ROLE_管理员" />		
			</security:user-service>	
		</security:authentication-provider>
	</security:authentication-manager>	 -->	
</beans>
